(()=>{var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{};
/*! Capacitor: https://capacitorjs.com/ - MIT License */const t=(e=>e.CapacitorPlatforms=(e=>{const t=new Map;t.set("web",{name:"web"});const n=e.CapacitorPlatforms||{currentPlatform:{name:"web"},platforms:t};return n.addPlatform=(e,t)=>{n.platforms.set(e,t)},n.setPlatform=e=>{n.platforms.has(e)&&(n.currentPlatform=n.platforms.get(e))},n})(e))("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:{});t.addPlatform,t.setPlatform;var n,r;(r=n||(n={})).Unimplemented="UNIMPLEMENTED",r.Unavailable="UNAVAILABLE";class i extends Error{constructor(e,t,n){super(e),this.message=e,this.code=t,this.data=n}}const a=e=>{var t,r,a,o,s;const l=e.CapacitorCustomPlatform||null,d=e.Capacitor||{},c=d.Plugins=d.Plugins||{},u=e.CapacitorPlatforms,p=(null===(t=null==u?void 0:u.currentPlatform)||void 0===t?void 0:t.getPlatform)||(()=>null!==l?l.name:(e=>{var t,n;return(null==e?void 0:e.androidBridge)?"android":(null===(n=null===(t=null==e?void 0:e.webkit)||void 0===t?void 0:t.messageHandlers)||void 0===n?void 0:n.bridge)?"ios":"web"})(e)),w=(null===(r=null==u?void 0:u.currentPlatform)||void 0===r?void 0:r.isNativePlatform)||(()=>"web"!==p()),f=(null===(a=null==u?void 0:u.currentPlatform)||void 0===a?void 0:a.isPluginAvailable)||(e=>{const t=h.get(e);return!!(null==t?void 0:t.platforms.has(p()))||!!m(e)}),m=(null===(o=null==u?void 0:u.currentPlatform)||void 0===o?void 0:o.getPluginHeader)||(e=>{var t;return null===(t=d.PluginHeaders)||void 0===t?void 0:t.find((t=>t.name===e))}),h=new Map,g=(null===(s=null==u?void 0:u.currentPlatform)||void 0===s?void 0:s.registerPlugin)||((e,t={})=>{const r=h.get(e);if(r)return console.warn(`Capacitor plugin "${e}" already registered. Cannot register plugins twice.`),r.proxy;const a=p(),o=m(e);let s;const u=r=>{let c;const u=(...u)=>{const p=(async()=>(!s&&a in t?s=s="function"==typeof t[a]?await t[a]():t[a]:null!==l&&!s&&"web"in t&&(s=s="function"==typeof t.web?await t.web():t.web),s))().then((t=>{const s=((t,r)=>{var s,l;if(!o){if(t)return null===(l=t[r])||void 0===l?void 0:l.bind(t);throw new i(`"${e}" plugin is not implemented on ${a}`,n.Unimplemented)}{const n=null==o?void 0:o.methods.find((e=>r===e.name));if(n)return"promise"===n.rtype?t=>d.nativePromise(e,r.toString(),t):(t,n)=>d.nativeCallback(e,r.toString(),t,n);if(t)return null===(s=t[r])||void 0===s?void 0:s.bind(t)}})(t,r);if(s){const e=s(...u);return c=null==e?void 0:e.remove,e}throw new i(`"${e}.${r}()" is not implemented on ${a}`,n.Unimplemented)}));return"addListener"===r&&(p.remove=async()=>c()),p};return u.toString=()=>`${r.toString()}() { [capacitor code] }`,Object.defineProperty(u,"name",{value:r,writable:!1,configurable:!1}),u},w=u("addListener"),f=u("removeListener"),g=(e,t)=>{const n=w({eventName:e},t),r=async()=>{const r=await n;f({eventName:e,callbackId:r},t)},i=new Promise((e=>n.then((()=>e({remove:r})))));return i.remove=async()=>{console.warn("Using addListener() without 'await' is deprecated."),await r()},i},b=new Proxy({},{get(e,t){switch(t){case"$$typeof":return;case"toJSON":return()=>({});case"addListener":return o?g:w;case"removeListener":return f;default:return u(t)}}});return c[e]=b,h.set(e,{name:e,proxy:b,platforms:new Set([...Object.keys(t),...o?[a]:[]])}),b});return d.convertFileSrc||(d.convertFileSrc=e=>e),d.getPlatform=p,d.handleError=t=>e.console.error(t),d.isNativePlatform=w,d.isPluginAvailable=f,d.pluginMethodNoop=(e,t,n)=>Promise.reject(`${n} does not have an implementation of "${t}".`),d.registerPlugin=g,d.Exception=i,d.DEBUG=!!d.DEBUG,d.isLoggingEnabled=!!d.isLoggingEnabled,d.platform=d.getPlatform(),d.isNative=d.isNativePlatform(),d},o=(e=>e.Capacitor=a(e))("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:{}),s=o.registerPlugin;o.Plugins;class l{constructor(e){this.listeners={},this.windowListeners={},e&&(console.warn(`Capacitor WebPlugin "${e.name}" config object was deprecated in v3 and will be removed in v4.`),this.config=e)}addListener(e,t){this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push(t);const n=this.windowListeners[e];n&&!n.registered&&this.addWindowListener(n);const r=async()=>this.removeListener(e,t),i=Promise.resolve({remove:r});return Object.defineProperty(i,"remove",{value:async()=>{console.warn("Using addListener() without 'await' is deprecated."),await r()}}),i}async removeAllListeners(){this.listeners={};for(const e in this.windowListeners)this.removeWindowListener(this.windowListeners[e]);this.windowListeners={}}notifyListeners(e,t){const n=this.listeners[e];n&&n.forEach((e=>e(t)))}hasListeners(e){return!!this.listeners[e].length}registerWindowListener(e,t){this.windowListeners[t]={registered:!1,windowEventName:e,pluginEventName:t,handler:e=>{this.notifyListeners(t,e)}}}unimplemented(e="not implemented"){return new o.Exception(e,n.Unimplemented)}unavailable(e="not available"){return new o.Exception(e,n.Unavailable)}async removeListener(e,t){const n=this.listeners[e];if(!n)return;const r=n.indexOf(t);this.listeners[e].splice(r,1),this.listeners[e].length||this.removeWindowListener(this.windowListeners[e])}addWindowListener(e){window.addEventListener(e.windowEventName,e.handler),e.registered=!0}removeWindowListener(e){e&&(window.removeEventListener(e.windowEventName,e.handler),e.registered=!1)}}const d=e=>encodeURIComponent(e).replace(/%(2[346B]|5E|60|7C)/g,decodeURIComponent).replace(/[()]/g,escape),c=e=>e.replace(/(%[\dA-F]{2})+/gi,decodeURIComponent);class u extends l{async getCookies(){const e=document.cookie,t={};return e.split(";").forEach((e=>{if(e.length<=0)return;let[n,r]=e.replace(/=/,"CAP_COOKIE").split("CAP_COOKIE");n=c(n).trim(),r=c(r).trim(),t[n]=r})),t}async setCookie(e){try{const t=d(e.key),n=d(e.value),r=`; expires=${(e.expires||"").replace("expires=","")}`,i=(e.path||"/").replace("path=",""),a=null!=e.url&&e.url.length>0?`domain=${e.url}`:"";document.cookie=`${t}=${n||""}${r}; path=${i}; ${a};`}catch(e){return Promise.reject(e)}}async deleteCookie(e){try{document.cookie=`${e.key}=; Max-Age=0`}catch(e){return Promise.reject(e)}}async clearCookies(){try{const e=document.cookie.split(";")||[];for(const t of e)document.cookie=t.replace(/^ +/,"").replace(/=.*/,`=;expires=${(new Date).toUTCString()};path=/`)}catch(e){return Promise.reject(e)}}async clearAllCookies(){try{await this.clearCookies()}catch(e){return Promise.reject(e)}}}s("CapacitorCookies",{web:()=>new u});const p=(e,t={})=>{const n=Object.assign({method:e.method||"GET",headers:e.headers},t),r=((e={})=>{const t=Object.keys(e);return Object.keys(e).map((e=>e.toLocaleLowerCase())).reduce(((n,r,i)=>(n[r]=e[t[i]],n)),{})})(e.headers)["content-type"]||"";if("string"==typeof e.data)n.body=e.data;else if(r.includes("application/x-www-form-urlencoded")){const t=new URLSearchParams;for(const[n,r]of Object.entries(e.data||{}))t.set(n,r);n.body=t.toString()}else if(r.includes("multipart/form-data")){const t=new FormData;if(e.data instanceof FormData)e.data.forEach(((e,n)=>{t.append(n,e)}));else for(const n of Object.keys(e.data))t.append(n,e.data[n]);n.body=t;const r=new Headers(n.headers);r.delete("content-type"),n.headers=r}else(r.includes("application/json")||"object"==typeof e.data)&&(n.body=JSON.stringify(e.data));return n};class w extends l{async request(e){const t=p(e,e.webFetchExtra),n=((e,t=!0)=>e?Object.entries(e).reduce(((e,n)=>{const[r,i]=n;let a,o;return Array.isArray(i)?(o="",i.forEach((e=>{a=t?encodeURIComponent(e):e,o+=`${r}=${a}&`})),o.slice(0,-1)):(a=t?encodeURIComponent(i):i,o=`${r}=${a}`),`${e}&${o}`}),"").substr(1):null)(e.params,e.shouldEncodeUrlParams),r=n?`${e.url}?${n}`:e.url,i=await fetch(r,t),a=i.headers.get("content-type")||"";let o,s,{responseType:l="text"}=i.ok?e:{};switch(a.includes("application/json")&&(l="json"),l){case"arraybuffer":case"blob":s=await i.blob(),o=await(async e=>new Promise(((t,n)=>{const r=new FileReader;r.onload=()=>{const e=r.result;t(e.indexOf(",")>=0?e.split(",")[1]:e)},r.onerror=e=>n(e),r.readAsDataURL(e)})))(s);break;case"json":o=await i.json();break;default:o=await i.text()}const d={};return i.headers.forEach(((e,t)=>{d[t]=e})),{data:o,headers:d,status:i.status,url:i.url}}async get(e){return this.request(Object.assign(Object.assign({},e),{method:"GET"}))}async post(e){return this.request(Object.assign(Object.assign({},e),{method:"POST"}))}async put(e){return this.request(Object.assign(Object.assign({},e),{method:"PUT"}))}async patch(e){return this.request(Object.assign(Object.assign({},e),{method:"PATCH"}))}async delete(e){return this.request(Object.assign(Object.assign({},e),{method:"DELETE"}))}}s("CapacitorHttp",{web:()=>new w});class f extends l{async write(e){if("undefined"==typeof navigator||!navigator.clipboard)throw this.unavailable("Clipboard API not available in this browser");if(void 0!==e.string)await this.writeText(e.string);else if(e.url)await this.writeText(e.url);else{if(!e.image)throw new Error("Nothing to write");if("undefined"==typeof ClipboardItem)throw this.unavailable("Writing images to the clipboard is not supported in this browser");try{const t=await(await fetch(e.image)).blob(),n=new ClipboardItem({[t.type]:t});await navigator.clipboard.write([n])}catch(e){throw new Error("Failed to write image")}}}async read(){if("undefined"==typeof navigator||!navigator.clipboard)throw this.unavailable("Clipboard API not available in this browser");if("undefined"==typeof ClipboardItem)return this.readText();try{const e=await navigator.clipboard.read(),t=e[0].types[0],n=await e[0].getType(t);return{value:await this._getBlobData(n,t),type:t}}catch(e){return this.readText()}}async readText(){if("undefined"==typeof navigator||!navigator.clipboard||!navigator.clipboard.readText)throw this.unavailable("Reading from clipboard not supported in this browser");return{value:await navigator.clipboard.readText(),type:"text/plain"}}async writeText(e){if("undefined"==typeof navigator||!navigator.clipboard||!navigator.clipboard.writeText)throw this.unavailable("Writting to clipboard not supported in this browser");await navigator.clipboard.writeText(e)}_getBlobData(e,t){return new Promise(((n,r)=>{const i=new FileReader;t.includes("image")?i.readAsDataURL(e):i.readAsText(e),i.onloadend=()=>{const e=i.result;n(e)},i.onerror=e=>{r(e)}}))}}const m=s("Clipboard",{web:()=>new f});console.log(m);(async()=>{await m.write({string:"Hello World!"})})()})();
//# sourceMappingURL=index.js.map
